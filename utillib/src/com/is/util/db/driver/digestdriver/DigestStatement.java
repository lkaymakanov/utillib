package com.is.util.db.driver.digestdriver;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
/**
 * Wraps PostgreSQL's Statement.
 * Performs manipulation of input/output data where necessary and delegates execution to Postgres's driver.
 * 
 */
public class DigestStatement implements Statement {
	
	protected Statement mStmt;
	protected DigestConnection mParentConnection;
	protected boolean mDebugMode;
	
	public DigestStatement(Statement aStmt, DigestConnection aParentConnection, boolean aDebugMode){
		mStmt = aStmt;
		mParentConnection = aParentConnection;
		mDebugMode = aDebugMode;
	}
	
	public void cancel() throws SQLException {
		mStmt.cancel();
	}

	public void clearWarnings() throws SQLException {
		mStmt.clearWarnings();
	}

	public void close() throws SQLException {
		mStmt.close();
	}

	public boolean execute(String arg0) throws SQLException {
		return mStmt.execute(arg0);
	}
	
	public boolean execute(String arg0, String[] arg1) throws SQLException {
		return mStmt.execute(arg0, arg1);
	}

	public ResultSet executeQuery(String arg0) throws SQLException {
		return new DigestResultSet(mStmt.executeQuery(arg0), this, mDebugMode);
	}

	public int executeUpdate(String arg0) throws SQLException {
		return mStmt.executeUpdate(arg0);
	}

	public int executeUpdate(String arg0, String[] arg1) throws SQLException {
		return mStmt.executeUpdate(arg0, arg1);
	}
	
	public int getMaxFieldSize() throws SQLException {
		return mStmt.getMaxFieldSize();
	}

	public int getMaxRows() throws SQLException {
		return mStmt.getMaxRows();
	}

	public boolean getMoreResults() throws SQLException {
		return mStmt.getMoreResults();
	}

	public int getQueryTimeout() throws SQLException {
		return mStmt.getQueryTimeout();
	}

	public ResultSet getResultSet() throws SQLException {
		return new DigestResultSet(mStmt.getResultSet(), this, mDebugMode);
	}

	public int getUpdateCount() throws SQLException {
		return mStmt.getUpdateCount();
	}

	public SQLWarning getWarnings() throws SQLException {
		return mStmt.getWarnings();
	}

	public void setCursorName(String arg0) throws SQLException {
		mStmt.setCursorName(arg0);
	}

	public void setEscapeProcessing(boolean arg0) throws SQLException {
		mStmt.setEscapeProcessing(arg0);
	}

	public void setMaxFieldSize(int arg0) throws SQLException {
		mStmt.setMaxFieldSize(arg0);
	}

	public void setMaxRows(int arg0) throws SQLException {
		mStmt.setMaxRows(arg0);
	}

	public void setQueryTimeout(int arg0) throws SQLException {
		mStmt.setQueryTimeout(arg0);
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return new DigestResultSet(mStmt.getGeneratedKeys(), this, mDebugMode);
	}
	
	public Connection getConnection() throws SQLException {
		return mParentConnection;
	}

    public void setFetchDirection(int direction) throws SQLException {
    	mStmt.setFetchDirection(direction);
    }
    
    public int getFetchDirection() throws SQLException {
    	return mStmt.getFetchDirection(); 
    }
    
    public void setFetchSize(int rows) throws SQLException {
    	mStmt.setFetchSize(rows);
    }
     
    public int getFetchSize() throws SQLException {
    	return mStmt.getFetchSize(); 
    }
 
    public int getResultSetConcurrency() throws SQLException {
    	return mStmt.getResultSetConcurrency();
    }

    public int getResultSetType()  throws SQLException {
    	return mStmt.getResultSetType();
    }
 
    public void addBatch( String sql ) throws SQLException {
    	mStmt.addBatch(sql);
    }

    public void clearBatch() throws SQLException {
    	mStmt.clearBatch();
    }

    public int[] executeBatch() throws SQLException {
    	return mStmt.executeBatch(); 
    }
  
    public boolean getMoreResults(int current) throws SQLException {
    	return mStmt.getMoreResults(current);
    }
   
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    	return mStmt.executeUpdate(sql, autoGeneratedKeys);
    }
 
    public int executeUpdate(String sql, int columnIndexes[]) throws SQLException {
    	return mStmt.executeUpdate(sql, columnIndexes);
    }

    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
    	return mStmt.execute(sql, autoGeneratedKeys);
    }

    public boolean execute(String sql, int columnIndexes[]) throws SQLException {
    	return mStmt.execute(sql, columnIndexes);
    }

    public int getResultSetHoldability() throws SQLException {
    	return mStmt.getResultSetHoldability();
    }

	
	public boolean isWrapperFor(Class<?> arg0) throws SQLException {
		return mStmt.isWrapperFor(arg0);
	}

	
	public <T> T unwrap(Class<T> arg0) throws SQLException {
		return mStmt.unwrap(arg0);
	}

	
	public boolean isClosed() throws SQLException {
		return mStmt.isClosed();
	}

	
	public boolean isPoolable() throws SQLException {
		return mStmt.isPoolable();
	}

	
	public void setPoolable(boolean arg0) throws SQLException {
		mStmt.setPoolable(arg0);
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}
	
}
